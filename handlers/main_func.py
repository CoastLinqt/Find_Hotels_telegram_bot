from telebot.types import Message, CallbackQuery
from loader import bot
from states.states_bot import States
import datetime
import emoji

from handlers.request_API import city_request, get_hotel_list, get_hotel_details
from keyboards import keyboards_answr
from telegram_bot_calendar import DetailedTelegramCalendar
from database.bot_db import add_response_to_db
from utils import decor_time


LSTEP: dict[str, str] = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}


@bot.message_handler(commands=["lowprice", "custom"])
@decor_time.chek_time
def main_function(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã /lowprice, /custom –∏
    –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª—è."""

    bot.set_state(message.from_user.id, States.city, message.chat.id)
    bot.send_message(message.from_user.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç(–¢–µ–∫—Å—Ç –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ){emoji.emojize('üòä')}?\n\n"
                                          f"*–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ä—É—Å—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.{emoji.emojize('üòî')}")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['command'] = message.text[1:]


@bot.message_handler(state=States.city)
@decor_time.chek_time
def get_city_name(message: Message) -> None:
    """–î–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    city_name = message.text
    if not city_name.isdigit():
        city_data = city_request(city_name)
        keyboards_answr.city_keyboard(message, city_data)
        bot.set_state(message.from_user.id, States.city_id, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['cities_data'] = city_data
    else:
        raise Exception(bot.reply_to(message, f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. {emoji.emojize('üî§')}"))


@bot.callback_query_handler(func=None, state=States.city_id)
@decor_time.chek_time
def get_city_id(call: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥–æ—Ä–æ–¥–∞ –∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ /custom, —Ç–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã."""
    city_id = call.data
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        city_data = data['cities_data']
        command = data['command']
    city_name = ""
    for k, v in city_data.items():
        if city_id == v:
            city_name = k
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        data['city'] = city_name
        data['city_id'] = int(city_id)

    if command == 'custom':
        bot.send_message(
            call.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏  –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.{emoji.emojize('üí∏')}"
            "\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –∑–∞ –Ω–æ—á—å.", reply_markup=keyboards_answr.min_price()
        )
        bot.set_state(call.from_user.id, States.min_price, call.message.chat.id)

    else:
        bot.send_message(call.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ. C–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–Ω–µ –±–æ–ª–µ–µ 5)?{emoji.emojize('üè®')}", reply_markup=keyboards_answr.hotel_qty())
        bot.set_state(call.from_user.id, States.hotel_qty, call.message.chat.id)


@bot.callback_query_handler(func=None, state=States.min_price)
@decor_time.chek_time
def get_min_custom(call) -> None:
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞ –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    if call.message:
        if call.data == '–≤—ã–±–æ—Ä':
            bot.send_message(
                call.from_user.id,
                f"–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.{emoji.emojize('üíµ')} ")
            bot.set_state(call.from_user.id, States.min_custom, call.message.chat.id)
        if call.data.isdigit():
            with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:

                min_price = call.data
                data['min_price'] = float(min_price)

            bot.send_message(
                call.from_user.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.{emoji.emojize('üí∏')}"
                "\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –∑–∞ –Ω–æ—á—å.", reply_markup=keyboards_answr.max_price())
            bot.set_state(call.from_user.id, States.max_price, call.message.chat.id)

    else:
        raise Exception('-')


@bot.message_handler(state=States.min_custom)
@decor_time.chek_time
def price_min(m):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å', –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    if m.text:
        if m.text.isdigit():
            bot.send_message(
                m.from_user.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.{emoji.emojize('üí∏')}"
                "\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –∑–∞ –Ω–æ—á—å", reply_markup=keyboards_answr.max_price())
            bot.set_state(m.from_user.id, States.max_price, m.chat.id)
            with bot.retrieve_data(m.from_user.id, m.chat.id) as data:
                data['min_price'] = float(m.text)
        else:
            bot.reply_to(m, "–û—à–∏–±–∫–∞. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")


@bot.callback_query_handler(func=None, state=States.max_price)
@decor_time.chek_time
def get_max_price(call) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /custom, –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π."""
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:

        min_price = data['min_price']

    if call.message:
        if call.data == '–≤—ã–±–æ—Ä':
            bot.send_message(
                call.from_user.id,
                f"–ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É.{emoji.emojize('üíµ')} ")
            bot.set_state(call.from_user.id, States.max_custom, call.message.chat.id)
        if call.data.isdigit():
            max_price = float(call.data)
            if max_price >= min_price:
                bot.send_message(call.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ. C–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–Ω–µ –±–æ–ª–µ–µ 5)?{emoji.emojize('üè®')}", reply_markup=keyboards_answr.hotel_qty())
                bot.set_state(call.from_user.id, States.hotel_qty, call.message.chat.id)
                with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
                    data['max_price'] = max_price
            else:
                raise Exception(bot.send_message(call.from_user.id, f"–û—à–∏–±–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.{emoji.emojize('üÜò')}"))
    else:
        bot.send_message(call.from_user.id, f"–û—à–∏–±–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.{emoji.emojize('üÜò')}")


@bot.message_handler(state=States.max_custom)
@decor_time.chek_time
def price_max(m):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å', –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    with bot.retrieve_data(m.from_user.id, m.chat.id) as data:
        min_price = data['min_price']
    if m.text:
        if m.text.isdigit():
            max_price = float(m.text)
            if max_price > min_price:
                bot.send_message(m.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ. C–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–Ω–µ –±–æ–ª–µ–µ 5)?{emoji.emojize('üè®')}",
                                 reply_markup=keyboards_answr.hotel_qty())
                bot.set_state(m.from_user.id, States.hotel_qty, m.chat.id)
                with bot.retrieve_data(m.from_user.id, m.chat.id) as data:
                    data['max_price'] = max_price
            else:
                raise Exception(bot.reply_to(m, f"–û—à–∏–±–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.{emoji.emojize('üÜò')}"))
        else:
            bot.reply_to(m, "–û—à–∏–±–∫–∞. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")


@bot.callback_query_handler(func=None, state=States.hotel_qty)
@decor_time.chek_time
def get_photo(call) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""

    if call.data.isdigit() and 0 < int(call.data) < 6:
        bot.send_message(call.from_user.id, f"–°–ø–∞—Å–∏–±–æ. –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å (–Ω–µ –±–æ–ª–µ–µ 3-—Ö){emoji.emojize('üèû')}?", reply_markup=keyboards_answr.photo_qty())
        bot.set_state(call.from_user.id, States.photo_custom, call.message.chat.id)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['hotel_qty'] = call.data
    else:
        raise Exception('-')


@bot.callback_query_handler(func=None, state=States.photo_custom)
@decor_time.chek_time
def set_photo(call):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö."""
    if call.data.isdigit() and 0 < int(call.data) < 4:
        bot.set_state(call.from_user.id, States.photo, call.message.chat.id)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['photo'] = int(call.data)
        bot.send_message(call.from_user.id, f"–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.{emoji.emojize('üìÜ')}")
        calendar_first, step = DetailedTelegramCalendar(calendar_id=1, locale='ru',
                                                        min_date=datetime.date.today()).build()
        bot.send_message(call.message.chat.id,
                         f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                         reply_markup=calendar_first)
        bot.set_state(call.from_user.id, States.check_in, call.message.chat.id)
    else:
        raise Exception('')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1), state=States.check_in)
@decor_time.chek_time
def calendar(call: CallbackQuery):
    """–û—Ç–≤–µ—Ç –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é 1 –¥–ª—è –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""
    result, key, step = DetailedTelegramCalendar(calendar_id=1, locale='ru', min_date=datetime.date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=key)
    elif result:
        bot.edit_message_text(f"–í–∞—à –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞{emoji.emojize('üîú')}: {result}",
                                call.message.chat.id,
                                call.message.message_id)
        bot.send_message(call.from_user.id, f"–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞.{emoji.emojize('üìÜ')}")

        calendar_second, step = DetailedTelegramCalendar(calendar_id=2, locale='ru', min_date=result).build()
        bot.send_message(call.message.chat.id,
                         f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                         reply_markup=calendar_second)
        bot.set_state(call.from_user.id, States.check_out, call.message.chat.id)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['check_in'] = result


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2), state=States.check_out)
@decor_time.chek_time
def calendar(call: CallbackQuery):
    """–û—Ç–≤–µ—Ç –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è 2 –ø–æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞ """

    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        date = data['check_in']
        command = data['command']

    result, key, step = DetailedTelegramCalendar(calendar_id=2, locale='ru', min_date=date).process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                                call.message.chat.id,
                                call.message.message_id,
                         reply_markup=key)
    elif result:
        bot.edit_message_text(f"–í–∞—à –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞{emoji.emojize('üîô')}: {result}",
                                call.message.chat.id,
                                call.message.message_id)
        date_format = "%d-%m-%Y"
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['check_in'] = date.strftime(date_format)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['check_out'] = result.strftime(date_format)

        check_in = datetime.datetime.strptime(data['check_in'], date_format)
        check_out = datetime.datetime.strptime(data['check_out'], date_format)
        days_in_hotel = (check_out - check_in).days

        bot.set_state(call.from_user.id, days_in_hotel, call.message.chat.id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['days_in_hotel'] = days_in_hotel

        if command == 'custom':

            bot.send_message(call.from_user.id, f"\n–ì–æ—Ä–æ–¥: {data['city'].title()}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π  : {data['hotel_qty']}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {data['photo']}\n"
                                                f"–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è: {data['check_in']}\n"
                                                f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data['check_out']}\n"
                                                f"–í—Å–µ–≥–æ –¥–Ω–µ–π –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {data['days_in_hotel']}\n"
                                                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ—á—å = –æ—Ç {data['min_price']} –¥–æ {data['max_price']} $\n"
                                                f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–∂–º–∏—Ç–µ - –î–∞", reply_markup=keyboards_answr.yes_no())

        else:
            bot.send_message(call.from_user.id, f"\n–ì–æ—Ä–æ–¥: {data['city'].title()}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π : {data['hotel_qty']}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {data['photo']}\n"
                                                f"–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è: {data['check_in']}\n"
                                                f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data['check_out']}\n"
                                                f"–í—Å–µ–≥–æ –¥–Ω–µ–π –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {data['days_in_hotel']}\n"
                                                f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–∂–º–∏—Ç–µ - –î–∞", reply_markup=keyboards_answr.yes_no())

        bot.set_state(call.from_user.id, States.final, call.message.chat.id)


@bot.callback_query_handler(func=None, state=States.final)
@decor_time.chek_time
def get_hotels(call):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ ID –≥–æ—Ä–æ–¥–∞.
    –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
     –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –∞–¥—Ä–µ—Å–∞.
     –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ—Ç–µ–ª—è—Ö –≤ –ë–î"""

    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        command = data['command']
        data['date_time'] = datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')
        data['chat_id'] = call.message.chat.id

    if call.data == "–¥–∞":
        bot.send_message(call.from_user.id, text=f"–ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥... {emoji.emojize('üßê')}")
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            cust_data = data
            # print(cust_data)
        hotels_list = get_hotel_list(cust_data=cust_data)
        # print(hotels_list)
        hotels_qty = int(data['hotel_qty'])
        hotel_days = int(data['days_in_hotel'])
        city_name = data['city']
        time_now = data['date_time']
        count = 0
        try:
            for hotel in range(hotels_qty):
                hotel_id = int(hotels_list['data']['propertySearch']['properties'][hotel]['id'])
                hotel_name = hotels_list['data']['propertySearch']['properties'][hotel]['name']

                hotel_price = round(float(hotels_list['data']['propertySearch']['properties'][hotel]['price']['lead']['amount']), 2)

                common_price = round(float(hotel_price * hotel_days), 2)

                hotel_location = hotels_list['data']['propertySearch']['properties'][hotel]['destinationInfo']['distanceFromDestination']['value']

                hotel_details = get_hotel_details(hotel_id=hotel_id)
                hotel_address = hotel_details['data']['propertyInfo']['summary']['location']['address']['addressLine']
                hotel_data = {
                    'chat_id': call.message.chat.id,
                    'city_name': city_name,
                    'hotel_id': hotel_id,
                    'hotel_name': hotel_name,
                    'hotel_price': hotel_price,
                    'common_price': common_price,
                    'hotel_address': hotel_address,
                    'hotel_days': hotel_days,
                    'hotel_location': hotel_location,
                    'date_time': time_now
                }
                if command == 'custom':
                    if data['min_price'] < hotel_price < data['max_price']:
                        bot.send_message(call.from_user.id, text=f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–µ–ª—é {hotel_name}: "
                                                              f"\n–ê–¥—Ä–µ—Å: {hotel_address}"
                                                              f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ = {hotel_location} –∫–º"
                                                              f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 –Ω–æ—á—å = {hotel_price} $"
                                                              f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {hotel_days} –¥–Ω–µ–π = {common_price} $")
                        if data['photo']:
                            bot.send_message(call.from_user.id, text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è:')
                            hotel_photos = data['photo']
                            for photo in range(hotel_photos):
                                photo_url = hotel_details['data']['propertyInfo']['propertyGallery']['images'][photo]['image']['url']
                                description = hotel_details['data']['propertyInfo']['propertyGallery']['images'][photo]['image']['description']
                                bot.send_message(call.from_user.id, text=f"{description}\n{photo_url}")
                                add_response_to_db(hotel_data=hotel_data)
                                count += 1
                    else:
                        break

                else:
                    add_response_to_db(hotel_data=hotel_data)
                    count += 1
                    bot.send_message(call.from_user.id, text=f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–µ–ª—é {hotel_name}: "
                                                          f"\n–ê–¥—Ä–µ—Å: {hotel_address}"
                                                          f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ = {hotel_location} –∫–º"
                                                          f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 –Ω–æ—á—å = {hotel_price} $"
                                                          f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {hotel_days} –¥–Ω–µ–π = {common_price} $")
                    if data['photo']:
                        bot.send_message(call.from_user.id, text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è:')
                        hotel_photos = data['photo']
                        for photo in range(hotel_photos):
                            photo_url = hotel_details['data']['propertyInfo']['propertyGallery']['images'][photo]['image']['url']
                            description = hotel_details['data']['propertyInfo']['propertyGallery']['images'][photo]['image']['description']
                            bot.send_message(call.from_user.id, text=f"{description}\n{photo_url}")

            if command == 'custom' or 'lowprice':
                if count == 0:
                    bot.send_message(call.from_user.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–µ–ª—è —Å –≤–∞—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
                                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ /help')
                else:
                    bot.send_message(call.from_user.id, text='–≠—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.'
                                                             '\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ /help')
        except Exception as exc:
            bot.send_message(call.from_user.id, text='–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É –æ—Ç–µ–ª–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å /help.')
            bot.delete_state(call.from_user.id, call.message.chat.id)
            raise Exception(exc)

    else:
        bot.send_message(call.from_user.id,
                         text='–í–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /help.')
        bot.delete_state(call.from_user.id, call.message.chat.id)